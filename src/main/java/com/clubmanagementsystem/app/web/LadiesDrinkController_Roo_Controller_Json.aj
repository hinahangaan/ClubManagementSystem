// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.clubmanagementsystem.app.web;

import com.clubmanagementsystem.app.domain.LadiesDrink;
import com.clubmanagementsystem.app.repository.LadiesDrinkRepository;
import com.clubmanagementsystem.app.web.LadiesDrinkController;
import java.util.List;
import org.bson.types.ObjectId;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

privileged aspect LadiesDrinkController_Roo_Controller_Json {
    
    @Autowired
    LadiesDrinkRepository LadiesDrinkController.ladiesDrinkRepository;
    
    @RequestMapping(value = "/{id}", method = RequestMethod.GET, headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> LadiesDrinkController.showJson(@PathVariable("id") ObjectId id) {
        LadiesDrink ladiesDrink = ladiesDrinkRepository.findOne(id);
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        if (ladiesDrink == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        return new ResponseEntity<String>(ladiesDrink.toJson(), headers, HttpStatus.OK);
    }
    
    @RequestMapping(headers = "Accept=application/json")
    @ResponseBody
    public ResponseEntity<String> LadiesDrinkController.listJson() {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json; charset=utf-8");
        List<LadiesDrink> result = ladiesDrinkRepository.findAll();
        return new ResponseEntity<String>(LadiesDrink.toJsonArray(result), headers, HttpStatus.OK);
    }
    
    @RequestMapping(method = RequestMethod.POST, headers = "Accept=application/json")
    public ResponseEntity<String> LadiesDrinkController.createFromJson(@RequestBody String json) {
        LadiesDrink ladiesDrink = LadiesDrink.fromJsonToLadiesDrink(json);
        ladiesDrinkRepository.save(ladiesDrink);
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        return new ResponseEntity<String>(headers, HttpStatus.CREATED);
    }
    
    @RequestMapping(value = "/jsonArray", method = RequestMethod.POST, headers = "Accept=application/json")
    public ResponseEntity<String> LadiesDrinkController.createFromJsonArray(@RequestBody String json) {
        for (LadiesDrink ladiesDrink: LadiesDrink.fromJsonArrayToLadiesDrinks(json)) {
            ladiesDrinkRepository.save(ladiesDrink);
        }
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        return new ResponseEntity<String>(headers, HttpStatus.CREATED);
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.PUT, headers = "Accept=application/json")
    public ResponseEntity<String> LadiesDrinkController.updateFromJson(@RequestBody String json, @PathVariable("id") ObjectId id) {
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        LadiesDrink ladiesDrink = LadiesDrink.fromJsonToLadiesDrink(json);
        if (ladiesDrinkRepository.save(ladiesDrink) == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        return new ResponseEntity<String>(headers, HttpStatus.OK);
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE, headers = "Accept=application/json")
    public ResponseEntity<String> LadiesDrinkController.deleteFromJson(@PathVariable("id") ObjectId id) {
        LadiesDrink ladiesDrink = ladiesDrinkRepository.findOne(id);
        HttpHeaders headers = new HttpHeaders();
        headers.add("Content-Type", "application/json");
        if (ladiesDrink == null) {
            return new ResponseEntity<String>(headers, HttpStatus.NOT_FOUND);
        }
        ladiesDrinkRepository.delete(ladiesDrink);
        return new ResponseEntity<String>(headers, HttpStatus.OK);
    }
    
}
